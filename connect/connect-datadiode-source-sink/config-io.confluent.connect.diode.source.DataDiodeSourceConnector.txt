==========================
null
==========================
ðŸ”˜ name



	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: true

==========================
diode
==========================
ðŸ”˜ diode.bind.address

The hostname or ip address to bind to. By default, this will bind to all interfaces.

	 - Type: STRING
	 - Default: 0.0.0.0
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ diode.port

The udp port to listen to.

	 - Type: INT
	 - Default: 3456
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ kafka.topic.prefix



	 - Type: false
	 - Default: STRING
	 - Importance: The prefix to attach to topic names. When the Sink connector writes records at the source, it encodes the topic name in the payload. This source connector will try to write to the same topic. Sometimes, it is desirable to prepend a prefix to the topic name. This configuration parameter is used to specify the prefix to attach to topic names. 
	 - Required: LOW

ðŸ”˜ missing.records.topic



	 - Type: false
	 - Default: STRING
	 - Importance: The Apache Kafka topic to which the missing records will be written to. Also provide the |ak| producer configurations such as ``bootstrap.servers`` and ``client.id`` with ``missing.records.`` as prefix. When this topic is not configured, the missing records will be available in Connect logs.
	 - Required: LOW

ðŸ”˜ socket.receive.buffer.bytes

The socket receive buffer size in bytes. Ensure that the OS kernel parameter 'net.core.rmem_max' is set to a value >= this buffer size. Otherwise, the requested buffer will be silently capped by the kernel.

	 - Type: INT
	 - Default: 33554432
	 - Importance: LOW
	 - Required: false

ðŸ”˜ diode.encryption.password

The password used to derive a shared secret between the sink and source connectors. You must use the same password in sink and source connectors.

	 - Type: PASSWORD
	 - Default: null
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ diode.encryption.salt

The salt used to derive a shared secret between the sink and source connectors. You must use the same salt in sink and source connectors.

	 - Type: PASSWORD
	 - Default: null
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ diode.encryption.class

Fully qualified class used for encrypting and decryption datagram packets. Currently, there are two implementations. ``io.confluent.connect.diode.serde.Aes256CbcEncryptor`` uses the AES algorithm with a 256 bit symmetric key derived from a password and salt. ``io.confluent.connect.diode.serde.NoopEncryptor`` disables encryption and decryption and sends  packets in plaintext. Custom encryption/decryption algorithms are possible by implementing ``io.confluent.connect.diode.serde.Encryptor``.

	 - Type: CLASS
	 - Default: io.confluent.connect.diode.serde.Aes256CbcEncryptor
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ diode.compression.class

Fully qualified class used for compression and decompression on datagram packets. Compression is CPU intensive, but reduces size of packets. Enable compression if the records are largely text data. Compression is only effective if multiple records are batched. Currently, there are two implementations. ``io.confluent.connect.diode.serde.GzipCompressor`` for gzip and ``io.confluent.connect.diode.serde.NoopCompressor`` to disable compression. You can provied a different implementation by implementing ``io.confluent.connect.diode.serde.Compressor``.

	 - Type: CLASS
	 - Default: io.confluent.connect.diode.serde.NoopCompressor
	 - Importance: MEDIUM
	 - Required: false

==========================
null
==========================
ðŸ”˜ header.converter.converter.type

How this converter will be used.

	 - Type: STRING
	 - Default: null
	 - Importance: LOW
	 - Required: true

ðŸ”˜ key.converter.converter.type

How this converter will be used.

	 - Type: STRING
	 - Default: null
	 - Importance: LOW
	 - Required: true

ðŸ”˜ value.converter.converter.type

How this converter will be used.

	 - Type: STRING
	 - Default: null
	 - Importance: LOW
	 - Required: true

