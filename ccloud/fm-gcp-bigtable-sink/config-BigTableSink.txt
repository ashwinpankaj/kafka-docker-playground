==========================
Which topics do you want to get data from?
==========================
ðŸ”˜ topics.regex



	 - Type: false
	 - Default: STRING
	 - Importance: A regular expression that matches the names of the topics to consume from. This is useful when you want to consume from multiple topics that match a certain pattern without having to list them all individually.
	 - Required: LOW

ðŸ”˜ topics



	 - Type: true
	 - Default: LIST
	 - Importance: Identifies the topic name or a comma-separated list of topic names.
	 - Required: HIGH

==========================
Schema Config
==========================
ðŸ”˜ schema.context.name

Add a schema context name. A schema context represents an independent scope in Schema Registry. It is a separate sub-schema tied to topics in different Kafka clusters that share the same Schema Registry instance. If not used, the connector uses the default schema configured for Schema Registry in your Confluent Cloud environment.

	 - Type: STRING
	 - Default: default
	 - Importance: MEDIUM
	 - Required: false

==========================
Input messages
==========================
ðŸ”˜ input.data.format

Sets the input Kafka record value format. Valid entries are AVRO, JSON_SR, PROTOBUF, JSON or BYTES. Note that you need to have Confluent Cloud Schema Registry configured if using a schema-based message format like AVRO, JSON_SR, and PROTOBUF.

	 - Type: STRING
	 - Default: JSON
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ input.key.format

Sets the input Kafka record key format. Valid entries are AVRO, BYTES, JSON, JSON_SR, PROTOBUF, or STRING. Note that you need to have Confluent Cloud Schema Registry configured if using a schema-based message format like AVRO, JSON_SR, and PROTOBUF

	 - Type: STRING
	 - Default: JSON
	 - Importance: HIGH
	 - Required: false

==========================
How should we connect to your data?
==========================
ðŸ”˜ connector.class



	 - Type: true
	 - Default: STRING
	 - Importance: 
	 - Required: HIGH

ðŸ”˜ name



	 - Type: true
	 - Default: STRING
	 - Importance: Sets a name for your connector.
	 - Required: HIGH

==========================
Kafka Cluster credentials
==========================
ðŸ”˜ kafka.auth.mode

Kafka Authentication mode. It can be one of KAFKA_API_KEY or SERVICE_ACCOUNT. It defaults to KAFKA_API_KEY mode.

	 - Type: STRING
	 - Default: KAFKA_API_KEY
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ kafka.service.account.id



	 - Type: false
	 - Default: STRING
	 - Importance: The Service Account that will be used to generate the API keys to communicate with Kafka Cluster.
	 - Required: HIGH

ðŸ”˜ kafka.api.key



	 - Type: false
	 - Default: STRING
	 - Importance: Kafka API Key. Required when kafka.auth.mode==KAFKA_API_KEY.
	 - Required: HIGH

ðŸ”˜ kafka.api.secret



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Secret associated with Kafka API key. Required when kafka.auth.mode==KAFKA_API_KEY.
	 - Required: HIGH

==========================
GCP credentials
==========================
ðŸ”˜ gcp.bigtable.credentials.json



	 - Type: true
	 - Default: PASSWORD
	 - Importance: GCP service account JSON file with write permissions for Cloud Bigtable.
	 - Required: HIGH

==========================
How should we connect to your Cloud BigTable instance?
==========================
ðŸ”˜ gcp.bigtable.project.id



	 - Type: true
	 - Default: STRING
	 - Importance: The ID of the Cloud Bigtable project to connect to.
	 - Required: HIGH

ðŸ”˜ gcp.bigtable.instance.id



	 - Type: true
	 - Default: STRING
	 - Importance: The ID of the Cloud Bigtable instance to connect to.
	 - Required: HIGH

==========================
Database details
==========================
ðŸ”˜ insert.mode

The insertion mode to use.

	 - Type: STRING
	 - Default: UPSERT
	 - Importance: HIGH
	 - Required: true

==========================
Connection details
==========================
ðŸ”˜ max.batch.size

The maximum number of records that can be batched into a batch of upserts. Note that since only a batch size of 1 for inserts is supported, max.batch.size must be exactly 1 when insert.mode is set to INSERT.

	 - Type: INT
	 - Default: 1000
	 - Importance: MEDIUM
	 - Required: false

==========================
Data mapping
==========================
ðŸ”˜ table.name.format

A format string for the destination table name, which may contain ${topic} as a placeholder for the originating topic name. For example, kafka_${topic} for the topic â€˜ordersâ€™ will map to the table name â€˜kafka_ordersâ€™.

	 - Type: STRING
	 - Default: ${topic}
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ bigtable.row.key.definition

For example the list: 'username, post_id, time_stamp' when applied to a Kafka key: {'username': 'bob','post_id': '213', 'time_stamp': '123123'} and with delimiter # gives the row key 'bob#213#123123'. You can also access terms nested in the key by using . as a delimiter. If this configuration is empty or unspecified and the Kafka Message Key is a: STRUCT: all the fields in the struct are used to construct the row key. BYTE ARRAY: the row key is set to the byte array as is. PRIMITIVE: the row key is set to the primitive stringified.

	 - Type: false
	 - Default: LIST
	 - Importance: A comma separated list of Kafka Record key field names that specifies the order of Kafka key fields to be concatenated to form the row key.
	 - Required: MEDIUM

ðŸ”˜ bigtable.row.key.delimiter



	 - Type: false
	 - Default: STRING
	 - Importance: The delimiter used in concatenating Kafka key fields in the row key. If this configuration is empty or unspecified, the key fields will be concatenated together directly.
	 - Required: LOW

ðŸ”˜ auto.create.tables

Whether to automatically create the destination table if it is found to be missing.

	 - Type: STRING
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ auto.create.column.families

Whether to automatically create missing columns families in the table relative to the record schema.

	 - Type: STRING
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
Consumer configuration
==========================
ðŸ”˜ max.poll.interval.ms

The maximum delay between subsequent consume requests to Kafka. This configuration property may be used to improve the performance of the connector, if the connector cannot send records to the sink system. Defaults to 300000 milliseconds (5 minutes).

	 - Type: LONG
	 - Default: 300000
	 - Importance: LOW
	 - Required: false

ðŸ”˜ max.poll.records

The maximum number of records to consume from Kafka in a single request. This configuration property may be used to improve the performance of the connector, if the connector cannot send records to the sink system. Defaults to 500 records.

	 - Type: LONG
	 - Default: 500
	 - Importance: LOW
	 - Required: false

==========================
Number of tasks for this connector
==========================
ðŸ”˜ tasks.max



	 - Type: true
	 - Default: INT
	 - Importance: Maximum number of tasks for the connector.
	 - Required: HIGH

==========================
Auto-restart policy
==========================
ðŸ”˜ auto.restart.on.user.error

Enable connector to automatically restart on user-actionable errors.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

==========================
Additional Configs
==========================
ðŸ”˜ value.converter.decimal.format

Specify the JSON/JSON_SR serialization format for Connect DECIMAL logical type values with two allowed literals:

	 - Type: STRING
	 - Default: BASE64
	 - Importance: LOW
	 - Required: false

ðŸ”˜ value.converter.reference.subject.name.strategy

Set the subject reference name strategy for value. Valid entries are DefaultReferenceSubjectNameStrategy or QualifiedReferenceSubjectNameStrategy. Note that the subject reference name strategy can be selected only for PROTOBUF format with the default strategy being DefaultReferenceSubjectNameStrategy.

	 - Type: STRING
	 - Default: DefaultReferenceSubjectNameStrategy
	 - Importance: LOW
	 - Required: false

ðŸ”˜ value.converter.connect.meta.data



	 - Type: false
	 - Default: BOOLEAN
	 - Importance: Allow the Connect converter to add its metadata to the output schema. Applicable for Avro Converters.
	 - Required: LOW

ðŸ”˜ value.converter.value.subject.name.strategy

Determines how to construct the subject name under which the value schema is registered with Schema Registry.

	 - Type: STRING
	 - Default: TopicNameStrategy
	 - Importance: LOW
	 - Required: false

ðŸ”˜ key.converter.key.subject.name.strategy

How to construct the subject name for key schema registration.

	 - Type: STRING
	 - Default: TopicNameStrategy
	 - Importance: LOW
	 - Required: false

