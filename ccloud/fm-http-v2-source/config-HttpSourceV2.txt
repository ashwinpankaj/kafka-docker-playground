==========================
How should we connect to your data?
==========================
ðŸ”˜ connector.class



	 - Type: true
	 - Default: STRING
	 - Importance: 
	 - Required: HIGH

ðŸ”˜ name



	 - Type: true
	 - Default: STRING
	 - Importance: Sets a name for your connector.
	 - Required: HIGH

==========================
Kafka Cluster credentials
==========================
ðŸ”˜ kafka.auth.mode

Kafka Authentication mode. It can be one of KAFKA_API_KEY or SERVICE_ACCOUNT. It defaults to KAFKA_API_KEY mode.

	 - Type: STRING
	 - Default: KAFKA_API_KEY
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ kafka.service.account.id



	 - Type: false
	 - Default: STRING
	 - Importance: The Service Account that will be used to generate the API keys to communicate with Kafka Cluster.
	 - Required: HIGH

ðŸ”˜ kafka.api.key



	 - Type: false
	 - Default: STRING
	 - Importance: Kafka API Key. Required when kafka.auth.mode==KAFKA_API_KEY.
	 - Required: HIGH

ðŸ”˜ kafka.api.secret



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Secret associated with Kafka API key. Required when kafka.auth.mode==KAFKA_API_KEY.
	 - Required: HIGH

ðŸ”˜ datapreview.schemas.enable

This config key only applies to data preview requests and governs whether the data preview output has record schema with it.

	 - Type: STRING
	 - Default: false
	 - Importance: LOW
	 - Required: false

==========================
CSFLE
==========================
ðŸ”˜ csfle.enabled

Determines whether the connector honours CSFLE rules or not

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ sr.service.account.id



	 - Type: false
	 - Default: STRING
	 - Importance: Select the service account that has appropriate permissions to schemas and encryption keys in the Schema Registry.
	 - Required: HIGH

==========================
Schema Config
==========================
ðŸ”˜ schema.context.name

Add a schema context name. A schema context represents an independent scope in Schema Registry. It is a separate sub-schema tied to topics in different Kafka clusters that share the same Schema Registry instance. If not used, the connector uses the default schema configured for Schema Registry in your Confluent Cloud environment.

	 - Type: STRING
	 - Default: default
	 - Importance: MEDIUM
	 - Required: false

==========================
Output messages
==========================
ðŸ”˜ output.data.format

Sets the output Kafka record value format. Valid entries are AVRO, JSON_SR, or PROTOBUF. Please configure Confluent Cloud Schema Registry.

	 - Type: STRING
	 - Default: JSON_SR
	 - Importance: HIGH
	 - Required: true

==========================
Number of tasks for this connector
==========================
ðŸ”˜ tasks.max



	 - Type: true
	 - Default: INT
	 - Importance: Maximum number of tasks for the connector.
	 - Required: HIGH

==========================
Behavior on error
==========================
ðŸ”˜ behavior.on.error

Error handling behavior setting for handling error response from HTTP requests. 

	 - Type: STRING
	 - Default: FAIL
	 - Importance: LOW
	 - Required: false

==========================
Authentication
==========================
ðŸ”˜ http.api.base.url



	 - Type: true
	 - Default: STRING
	 - Importance: The HTTP API Base URL. For example: `http://example.com/absenceManagement/v1`.
	 - Required: HIGH

ðŸ”˜ auth.type

Authentication type of the endpoint. Valid values are ``NONE``, ``BASIC``, ``OAUTH2`` (Client Credentials grant type only), ``BEARER``, ``API_KEY``

	 - Type: STRING
	 - Default: NONE
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ connection.user



	 - Type: false
	 - Default: STRING
	 - Importance: The username to be used with an endpoint requiring basic authentication.
	 - Required: MEDIUM

ðŸ”˜ connection.password



	 - Type: false
	 - Default: PASSWORD
	 - Importance: The password to be used with an endpoint requiring basic authentication.
	 - Required: MEDIUM

ðŸ”˜ bearer.token



	 - Type: false
	 - Default: PASSWORD
	 - Importance: The bearer authentication token to be used with an endpoint requiring bearer token based authentication.
	 - Required: MEDIUM

ðŸ”˜ oauth2.token.url



	 - Type: false
	 - Default: STRING
	 - Importance: The URL to be used for fetching the OAuth2 token. Client Credentials is the only supported grant type.
	 - Required: MEDIUM

ðŸ”˜ oauth2.client.id



	 - Type: false
	 - Default: STRING
	 - Importance: The client id used when fetching the OAuth2 token.
	 - Required: MEDIUM

ðŸ”˜ oauth2.client.secret



	 - Type: false
	 - Default: PASSWORD
	 - Importance: The client secret used when fetching the OAuth2 token.
	 - Required: MEDIUM

ðŸ”˜ oauth2.token.property

The name of the property containing the OAuth2 token returned by the OAuth2 token URL (defaults to `access_token`).

	 - Type: STRING
	 - Default: access_token
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ oauth2.client.scope

The scope parameter sent to the service when fetching the OAuth2 token.

	 - Type: STRING
	 - Default: any
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ oauth2.client.auth.mode

Specifies how to encode ``client_id`` and ``client_secret`` in the OAuth2 authorization request. If set to ``header``, the credentials are encoded as an `'Authorization: Basic <base-64 encoded client_id:client_secret>'` HTTP header. If set to 'url', then ``client_id`` and ``client_secret`` are sent as URL encoded parameters.

	 - Type: STRING
	 - Default: header
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ oauth2.client.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: HTTP headers to be included in the OAuth2 client endpoint. Individual headers should be separated by ``|``. This configuration can be set via CLI only.
	 - Required: LOW

ðŸ”˜ oauth2.client.header.separator

Separator character used in OAuth2 Client Headers. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: LOW
	 - Required: false

ðŸ”˜ gcp.credentials.json



	 - Type: false
	 - Default: PASSWORD
	 - Importance: GCP service account JSON file.
	 - Required: HIGH

ðŸ”˜ oauth2.jwt.enabled

Whether to generate and add JWT token to request. If selected, JWT token will be added as ``jwt_token`` request param.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ oauth2.jwt.keystore.path



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Keystore containing private key to use to sign JWT.
	 - Required: MEDIUM

ðŸ”˜ oauth2.jwt.keystore.password



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Password to access keystore.
	 - Required: MEDIUM

ðŸ”˜ oauth2.jwt.keystore.type

JWT keystore type

	 - Type: STRING
	 - Default: JKS
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ oauth2.jwt.claimset



	 - Type: false
	 - Default: STRING
	 - Importance: JSON containing JWT claims
	 - Required: MEDIUM

ðŸ”˜ https.ssl.enabled

Controls whether to enforce TLSv1.3 for HTTPS connections. If false, the connector uses the JVM default TLS configuration (typically TLSv1.2). If true, TLSv1.3 is enforced. Note that, even when disabled, HTTPS connections still use TLS. This setting only controls TLS version enforcement.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ https.ssl.keystorefile



	 - Type: false
	 - Default: PASSWORD
	 - Importance: The key store containing the server certificate. Should be in JKS format.
	 - Required: LOW

ðŸ”˜ https.ssl.keystore.password



	 - Type: false
	 - Default: PASSWORD
	 - Importance: The store password for the key store file.
	 - Required: HIGH

ðŸ”˜ https.ssl.key.password



	 - Type: false
	 - Default: PASSWORD
	 - Importance: The password for the private key in the key store file.
	 - Required: HIGH

ðŸ”˜ https.ssl.truststorefile



	 - Type: false
	 - Default: PASSWORD
	 - Importance: The trust store containing a server CA certificate. Should be in JKS format.
	 - Required: HIGH

ðŸ”˜ https.ssl.protocol

The protocol to use for SSL connections

	 - Type: STRING
	 - Default: TLSv1.3
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ https.ssl.truststore.password



	 - Type: false
	 - Default: PASSWORD
	 - Importance: The trust store password containing a server CA certificate.
	 - Required: HIGH

ðŸ”˜ api.key.location

Specifies where the API key is included in the HTTP request. Choose ``HEADER`` to send the API key as an HTTP header (for example, ``X-API-KEY: your-api-key``), or ``QUERY`` to include it as a query parameter in the URL (for example, ``?api_key=your-api-key``). The default is ``HEADER`` which is the most common and secure approach.

	 - Type: STRING
	 - Default: HEADER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api.key.name

The identifier for the API key used in authentication. The format depends on the ``api.key.location`` configuration. If location is ``HEADER``, use the HTTP header name (for example, ``X-API-KEY``). If location is ``QUERY``, use the query parameter name (for example, ``api_key``, ``app_id``). The default value ``X-API-KEY`` is commonly used for header-based authentication.

	 - Type: STRING
	 - Default: X-API-KEY
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api.key.value



	 - Type: false
	 - Default: PASSWORD
	 - Importance: The API key to be used with an endpoint that requires API key-based authentication
	 - Required: MEDIUM

ðŸ”˜ http.proxy.host



	 - Type: false
	 - Default: STRING
	 - Importance: The host or IP address of the HTTP proxy.
	 - Required: MEDIUM

ðŸ”˜ http.proxy.port



	 - Type: false
	 - Default: INT
	 - Importance: The port number of the HTTP proxy.
	 - Required: MEDIUM

ðŸ”˜ http.proxy.user



	 - Type: false
	 - Default: STRING
	 - Importance: The username to be used for proxy authentication.
	 - Required: MEDIUM

ðŸ”˜ http.proxy.password



	 - Type: false
	 - Default: PASSWORD
	 - Importance: The password to be used for proxy authentication.
	 - Required: MEDIUM

==========================
APIs
==========================
ðŸ”˜ apis.num

The number of http(s) APIs to configure. This value should be less than or equal to 15

	 - Type: INT
	 - Default: 1
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api.chaining.parent.child.relationship



	 - Type: true
	 - Default: STRING
	 - Importance: Comma separated list of parent-child relationship in case of API Chaining. For ex - If api1 is the parent API, and api2,api3 are the child APIs of api1, then the value will be set to ``api1::api2,api1::api3``.
	 - Required: HIGH

==========================
Reporter
==========================
ðŸ”˜ reporter.error.topic.name

The name of the topic to produce errant records after each unsuccessful API operation. Defaults to 'error-${connector}' if not set. You can provide ``${connector}`` in the value to use it as a placeholder for the logical cluster ID.

	 - Type: STRING
	 - Default: error-${connector}
	 - Importance: LOW
	 - Required: false

ðŸ”˜ report.errors.as

Dictates the content of records produced to the error topic. If set to ``Error string`` the value would be a human readable string describing the failure. The value will include some or all of the following information if available: http response code, reason phrase, submitted payload, url, response content, exception and error message. If set to http_response, the value would be the plain response content for the request which failed to write the record. In both modes, any information about the failure will also be included in the error records headers.

	 - Type: STRING
	 - Default: Error string
	 - Importance: LOW
	 - Required: false

==========================
Additional Configs
==========================
ðŸ”˜ errors.tolerance

Use this property if you would like to configure the connector's error handling behavior. WARNING: This property should be used with CAUTION for SOURCE CONNECTORS as it may lead to dataloss. If you set this property to 'all', the connector will not fail on errant records, but will instead log them (and send to DLQ for Sink Connectors) and continue processing. If you set this property to 'none', the connector task will fail on errant records.

	 - Type: STRING
	 - Default: none
	 - Importance: LOW
	 - Required: false

ðŸ”˜ value.converter.decimal.format

Specify the JSON/JSON_SR serialization format for Connect DECIMAL logical type values with two allowed literals:

	 - Type: STRING
	 - Default: BASE64
	 - Importance: LOW
	 - Required: false

ðŸ”˜ value.converter.connect.meta.data



	 - Type: false
	 - Default: BOOLEAN
	 - Importance: Allow the Connect converter to add its metadata to the output schema. Applicable for Avro Converters.
	 - Required: LOW

ðŸ”˜ value.converter.value.subject.name.strategy

Determines how to construct the subject name under which the value schema is registered with Schema Registry.

	 - Type: STRING
	 - Default: TopicNameStrategy
	 - Importance: LOW
	 - Required: false

ðŸ”˜ key.converter.key.subject.name.strategy

How to construct the subject name for key schema registration.

	 - Type: STRING
	 - Default: TopicNameStrategy
	 - Importance: LOW
	 - Required: false

ðŸ”˜ value.converter.reference.subject.name.strategy

Set the subject reference name strategy for value. Valid entries are DefaultReferenceSubjectNameStrategy or QualifiedReferenceSubjectNameStrategy. Note that the subject reference name strategy can be selected only for PROTOBUF format with the default strategy being DefaultReferenceSubjectNameStrategy.

	 - Type: STRING
	 - Default: DefaultReferenceSubjectNameStrategy
	 - Importance: LOW
	 - Required: false

ðŸ”˜ value.converter.ignore.default.for.nullables

When set to true, this property ensures that the corresponding record in Kafka is NULL, instead of showing the default column value. Applicable for AVRO,PROTOBUF and JSON_SR Converters.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

==========================
API-1 Configs
==========================
ðŸ”˜ api1.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api1.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api1.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api1.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api1.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api1.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api1.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api1.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api1.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api1.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api1.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api1.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api1.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api1.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api1.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api1.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api1.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api1.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api1.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api1.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api1.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api1.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-2 Configs
==========================
ðŸ”˜ api2.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api2.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api2.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api2.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api2.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api2.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api2.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api2.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api2.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api2.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api2.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api2.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api2.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api2.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api2.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api2.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api2.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api2.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api2.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api2.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api2.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api2.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-3 Configs
==========================
ðŸ”˜ api3.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api3.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api3.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api3.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api3.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api3.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api3.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api3.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api3.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api3.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api3.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api3.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api3.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api3.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api3.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api3.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api3.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api3.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api3.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api3.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api3.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api3.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-4 Configs
==========================
ðŸ”˜ api4.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api4.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api4.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api4.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api4.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api4.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api4.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api4.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api4.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api4.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api4.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api4.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api4.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api4.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api4.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api4.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api4.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api4.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api4.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api4.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api4.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api4.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-5 Configs
==========================
ðŸ”˜ api5.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api5.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api5.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api5.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api5.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api5.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api5.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api5.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api5.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api5.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api5.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api5.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api5.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api5.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api5.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api5.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api5.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api5.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api5.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api5.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api5.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api5.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-6 Configs
==========================
ðŸ”˜ api6.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api6.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api6.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api6.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api6.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api6.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api6.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api6.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api6.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api6.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api6.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api6.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api6.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api6.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api6.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api6.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api6.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api6.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api6.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api6.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api6.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api6.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-7 Configs
==========================
ðŸ”˜ api7.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api7.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api7.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api7.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api7.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api7.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api7.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api7.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api7.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api7.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api7.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api7.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api7.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api7.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api7.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api7.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api7.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api7.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api7.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api7.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api7.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api7.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-8 Configs
==========================
ðŸ”˜ api8.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api8.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api8.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api8.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api8.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api8.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api8.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api8.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api8.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api8.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api8.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api8.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api8.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api8.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api8.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api8.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api8.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api8.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api8.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api8.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api8.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api8.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-9 Configs
==========================
ðŸ”˜ api9.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api9.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api9.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api9.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api9.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api9.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api9.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api9.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api9.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api9.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api9.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api9.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api9.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api9.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api9.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api9.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api9.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api9.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api9.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api9.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api9.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api9.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-10 Configs
==========================
ðŸ”˜ api10.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api10.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api10.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api10.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api10.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api10.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api10.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api10.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api10.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api10.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api10.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api10.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api10.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api10.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api10.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api10.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api10.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api10.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api10.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api10.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api10.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api10.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-11 Configs
==========================
ðŸ”˜ api11.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api11.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api11.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api11.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api11.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api11.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api11.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api11.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api11.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api11.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api11.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api11.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api11.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api11.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api11.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api11.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api11.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api11.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api11.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api11.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api11.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api11.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-12 Configs
==========================
ðŸ”˜ api12.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api12.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api12.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api12.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api12.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api12.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api12.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api12.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api12.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api12.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api12.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api12.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api12.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api12.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api12.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api12.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api12.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api12.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api12.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api12.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api12.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api12.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-13 Configs
==========================
ðŸ”˜ api13.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api13.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api13.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api13.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api13.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api13.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api13.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api13.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api13.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api13.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api13.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api13.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api13.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api13.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api13.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api13.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api13.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api13.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api13.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api13.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api13.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api13.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-14 Configs
==========================
ðŸ”˜ api14.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api14.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api14.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api14.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api14.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api14.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api14.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api14.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api14.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api14.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api14.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api14.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api14.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api14.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api14.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api14.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api14.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api14.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api14.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api14.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api14.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api14.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
API-15 Configs
==========================
ðŸ”˜ api15.http.api.path



	 - Type: false
	 - Default: STRING
	 - Importance: The HTTP API path together with the 'http.api.base.url' will form the complete HTTP(S) URL. This path can be templated with offset information. For example: ``/resource1/${offset}`` where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset').
	 - Required: HIGH

ðŸ”˜ api15.topics



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the Kafka topics to publish data to.
	 - Required: HIGH

ðŸ”˜ api15.http.request.headers



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP headers to be included in each request. Header names and values should be separated by `:`. Distinct headers should be separated by `|`. For example: `From:abcxyz@confluent.io|Content-Length:348`.
	 - Required: MEDIUM

ðŸ”˜ api15.http.request.method

HTTP Request Method. Valid options are `GET` and `POST`.

	 - Type: STRING
	 - Default: GET
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ api15.http.request.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP parameters to be added to each request. Parameter names and values should be separated by ``=``. Distinct parameters should be separated by ``&``. Parameter values can be templated with offset information (for example: ``search_after=${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The parameters are only set if 'http.request.method' = `GET`.
	 - Required: MEDIUM

ðŸ”˜ api15.http.connect.timeout.ms

The time in milliseconds to wait for a connection to be established

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.request.timeout.ms

The time in milliseconds to wait for a request response from the server

	 - Type: INT
	 - Default: 30000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.request.body



	 - Type: false
	 - Default: STRING
	 - Importance: The payload to be sent along with each HTTP request. The value can be templated with offset (for example: ``search_after: ${offset}``) where ``${offset}`` will be substituted with the offset generated from the previous request's response (or if it's the first request, from 'http.initial.offset'). The body is only set if 'http.request.method' = `POST`.
	 - Required: MEDIUM

ðŸ”˜ api15.max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 5
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.offset.mode

This config indicates how offsets are computed and how requests are generated. If set to ``SIMPLE_INCREMENTING``, the ${offset} used to generate requests is simply the previous offset (or ``http.initial.offset``) incremented by 1 per sourced record. In this mode, ``http.initial.offset`` needs to be set to an integer value. If set to ``CHAINING``, the config 'http.offset.json.pointer' needs to be set, and the offset for a record is set to the value for the configured key in the response data. If the value is ``CURSOR_PAGINATION``, then the config 'http.next.page.json.pointer' needs to be set and the offset for the last record in each page will be set to the next page value. If set to ``SNAPSHOT_PAGINATION``, only the config 'http.offset.json.pointer' needs to be set.

	 - Type: STRING
	 - Default: SIMPLE_INCREMENTING
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ api15.http.initial.offset



	 - Type: false
	 - Default: STRING
	 - Importance: The initial offset to be used to generate the first request. This needs to be set if either one or more of the configs - 'url', 'http.request.parameters', or 'http.request.body' contain the template variable ``${offset}``.
	 - Required: HIGH

ðŸ”˜ api15.retry.backoff.policy

The backoff policy to use in terms of retry - CONSTANT_VALUE or EXPONENTIAL_WITH_JITTER

	 - Type: STRING
	 - Default: EXPONENTIAL_WITH_JITTER
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.retry.backoff.ms

The initial duration in milliseconds to wait following an error before a retry attempt is made. Subsequent backoff attempts can be a constant value or exponential with jitter (can be configured using api*.retry.backoff.policy parameter). Jitter adds randomness to the exponential backoff algorithm to prevent synchronized retries.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.response.data.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the entity in the JSON response containing the actual data that should be written to Kafka as records. The entity can be an array (multiple records in a single response) or an object / scalar value (single record).
	 - Required: HIGH

ðŸ”˜ api15.http.offset.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON Pointer to the value in each record that corresponds to the offset for that record (it is relative to 'http.response.data.json.pointer'). The offset will be available to the subsequent request as ${offset} and it will also be used for checkpointing and recovery in case of connector failures or restarts. This config should only be set if 'http.offset.mode' is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api15.retry.on.status.codes

Comma-separated list of HTTP status codes or range of codes to retry on. Ranges are specified with start and optional end code. Range boundaries are inclusive. For instance, 400- includes all codes greater than or equal to 400. 400-500 includes codes from 400 to 500, including 500. Multiple ranges and single codes can be specified together to achieve fine-grained control over retry behavior. For example, 404,408,500- will retry on 404 NOT FOUND, 408 REQUEST TIMEOUT, and all 5xx error codes. Note that some status codes will always be retried, such as unauthorized, timeouts and too many requests.

	 - Type: STRING
	 - Default: 400-
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.request.headers.separator

The character that separates multiple distinct headers within ``http.request.headers``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.next.page.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: The JSON pointer to the value in the response which corresponds to the next page reference (either a page token, a full URL or a URL fragment). This will be stored as the offset and will be available to the subsequent request via the template variable ${offset}. This config should only be set if 'http.offset.mode' is set to ``CURSOR_PAGINATION``.
	 - Required: MEDIUM

ðŸ”˜ api15.request.interval.ms

The time in milliseconds to wait between consecutive requests.

	 - Type: INT
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.request.parameters.separator

The character that separates multiple distinct request parameters within ``http.request.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: &
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.test.api

Flag to determine if the api needs to be tested

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ api15.enable.cursor.pagination.with.timestamp.mode

Whether to use cursor pagination with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.timestamp.json.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: JSON pointer to the timestamp field in the response. It is used to construct time related parameters for the subsequent API calls.
	 - Required: MEDIUM

ðŸ”˜ api15.initial.start.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: The initial start timestamp to be used to generate the first request. This needs to be set when using ``cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api15.http.cursor.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Name of the request parameter which holds the next page token.
	 - Required: MEDIUM

ðŸ”˜ api15.http.request.sensitive.headers



	 - Type: false
	 - Default: PASSWORD
	 - Importance: Sensitive HTTP headers to include in each request. Sensitive header names and values should be separated by ``:``. Distinct headers should be separated by ``|``. For example: ``From:abcxyz@confluent.io|Content-Length:348``. If a key is present in both regular and sensitive headers, the value in sensitive headers takes priority. This is a **CLI-only feature**.
	 - Required: MEDIUM

ðŸ”˜ api15.initial.end.timestamp.value



	 - Type: false
	 - Default: STRING
	 - Importance: Sets the initial end timestamp to generate the first request when using ``enable.cursor.pagination.with.timestamp.mode`` or ``chaining.with.timestamp.mode`` with ``chaining.with.timestamp.mode.record.ordering`` set to ``Global``.
	 - Required: MEDIUM

ðŸ”˜ api15.timestamp.format

Timestamp format used in the time related request parameters. It should match the format of initial.start.timestamp.value and initial.end.timestamp.value

	 - Type: STRING
	 - Default: Unix Timestamp Milliseconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.timestamp.interval.format

Format of the timestamp interval provided.

	 - Type: STRING
	 - Default: Seconds
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.timestamp.interval

Timestamp interval between start time and end time.

	 - Type: LONG
	 - Default: 86400
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.time.range.request.delay

The time in milliseconds to wait between consecutive time range requests in timestamp mode with cursor pagination.

	 - Type: LONG
	 - Default: 60000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.is.next.page.token.absolute.url

Whether next page token is an absolute url or not.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.path.parameters



	 - Type: false
	 - Default: STRING
	 - Importance: HTTP path parameters to be added to the request. Parameter names and values should be separated by ``:``. Distinct parameters should be separated by ``|``. Parameter values can be templated with different template values like ``${offset}``.
	 - Required: MEDIUM

ðŸ”˜ api15.http.path.parameters.separator

The character that separates multiple distinct path parameters within ``http.path.parameters``. This configuration can be set via CLI only.

	 - Type: STRING
	 - Default: |
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.response.schema.enforce

Controls how strictly the connector enforces the HTTP response schema. When set to ``STRICT``, the connector validates that the response conforms to the defined OpenAPI response schema. For both missing non-optional and new fields, the connector handles the error (fail or ignore) based on the ``behavior.on.error`` setting. When set to ``NONE``, the connector does not enforce the OpenAPI schema and incase non-optional field is missing, connector deduces the schema for the response dynamically otherwise connector registers new fields as optional strings.

	 - Type: STRING
	 - Default: NONE
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.chaining.with.timestamp.mode

Whether to use chaining with timestamp mode.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.chaining.with.timestamp.mode.record.ordering

Specifies how records are ordered during chaining when using timestamp mode. Use ``Relative`` when the source API provides ordering only within a time window, where the order may vary across queries. Use ``Global`` when the source API guarantees a consistent ordering across all queries.

	 - Type: STRING
	 - Default: Global
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ api15.http.chaining.pagination.parameter.name



	 - Type: false
	 - Default: STRING
	 - Importance: Specifies the name of the query parameter used in the request for chaining with time window pagination. This is typically used when fetching the next page of results using values like ``starting_after``.
	 - Required: MEDIUM

ðŸ”˜ api15.http.offset.json.primary.key.pointer



	 - Type: false
	 - Default: STRING
	 - Importance: Defines the JSON Pointer to the offset value within each record (relative to ``http.response.data.json.pointer``).  This offset becomes ``${primary_key}`` for subsequent requests and enables checkpointing and recovery if the connector fails or restarts. Only applicable when ``http.offset.mode`` is set to ``CHAINING``.
	 - Required: MEDIUM

ðŸ”˜ api15.should.add.start.delay

Whether to add delay (request.interval.ms) in starting the first operation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

==========================
Auto-restart policy
==========================
ðŸ”˜ auto.restart.on.user.error

Enable connector to automatically restart on user-actionable errors.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

